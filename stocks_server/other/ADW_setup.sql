--Create your own copy of SH schema:

create user CAPSTONE IDENTIFIED BY "AaZZ0r_clee1";  --creating new user schema
GRANT CONNECT, resource TO CAPSTONE;    --granting permissions to this user
 
ALTER USER CAPSTONE QUOTA UNLIMITED ON DATA;

BEGIN
    ords_admin.enable_schema (
        p_enabled               => TRUE,
        p_schema                => 'CAPSTONE',
        p_url_mapping_type      => 'BASE_PATH',
        p_url_mapping_pattern   => 'capstone', -- this flag says, use 'capstone' in the URIs for CAPSTONE
        p_auto_rest_auth        => TRUE   -- this flag says, don't expose my REST APIs
    );
    COMMIT;
END;
/

--Now the tables??
--First connect to the schema
--getting help from don gepeto:

CREATE TABLE CAPSTONE.USERS (
    USER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY, -- This creates a default id number using SQL's IDENTITY feature
    USERNAME VARCHAR2(100),
    PASSWORD VARCHAR2(100),
    CONSTRAINT users_pk PRIMARY KEY (USER_ID)   --making id the primary key
);

CREATE TABLE CAPSTONE.STOCKS (
    STOCK_ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    USER_ID NUMBER,
    SYMBOL VARCHAR2(100),
    QUANTITY NUMBER,
    CONSTRAINT fk_user
        FOREIGN KEY (USER_ID)
        REFERENCES USERS (USER_ID)
);

--lets run some tests:
--creating a test user:
INSERT INTO CAPSTONE.USERS (USERNAME, PASSWORD) 
VALUES ('testUser', '8cb2237d0679ca88db6464eac60da96345513964');    --dont forget: in "production" the password should be hashed. this is hash for '12345'
commit;

INSERT INTO CAPSTONE.USERS (USERNAME, PASSWORD) 
VALUES ('newUser', '3978d009748ef54ad6ef7bf851bd55491b1fe6bb');    --this is hash for 'happy'
commit;


--lets get some stocks for this user:
--remember we dont know the user_id so we have to make a "subquery":
INSERT INTO CAPSTONE.STOCKS (USER_ID, SYMBOL, QUANTITY)
VALUES ((SELECT USER_ID FROM CAPSTONE.USERS WHERE USERNAME = 'testUser'), 'AAPL', 11);

INSERT INTO CAPSTONE.STOCKS (USER_ID, SYMBOL, QUANTITY)
VALUES ((SELECT USER_ID FROM USERS WHERE USERNAME = 'testUser'), 'MSFT', 22);

INSERT INTO CAPSTONE.STOCKS (USER_ID, SYMBOL, QUANTITY)
VALUES ((SELECT USER_ID FROM CAPSTONE.USERS WHERE USERNAME = 'testUser'), 'NVDA', 33);

INSERT INTO CAPSTONE.STOCKS (USER_ID, SYMBOL, QUANTITY)
VALUES ((SELECT USER_ID FROM USERS WHERE USERNAME = 'testUser'), 'GOOGL', 44);

INSERT INTO CAPSTONE.STOCKS (USER_ID, SYMBOL, QUANTITY)
VALUES ((SELECT USER_ID FROM CAPSTONE.USERS WHERE USERNAME = 'testUser'), 'AMZN', 55);
commit;

--now we need a way to interact from our server:
--Publish MYOWNSHs tables for REST access. This is almost the same as from databases lab1:

BEGIN
    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'CAPSTONE',
                       p_object => 'USERS',
                       p_object_type => 'TABLE',
                       p_object_alias => 'users',
                       p_auto_rest_auth => FALSE);
    commit;
END;
/

BEGIN
    ORDS.ENABLE_OBJECT(p_enabled => TRUE,
                       p_schema => 'CAPSTONE',
                       p_object => 'STOCKS',
                       p_object_type => 'TABLE',
                       p_object_alias => 'stocks',
                       p_auto_rest_auth => FALSE);
    commit;
END;
/

--we need the rest api endpoint:
--this is for fetching user and password:
--REMEMBER THIS WILL GIVE AN EMPTY 'items' LIST IF THE USERNAME IS NOT FOUND
BEGIN
  ORDS.define_service(
    p_module_name    => 'user check',
    p_base_path      => 'users/',
    p_pattern        => ':username/:password/',
    p_method         => 'GET',
    p_source_type    => ORDS.source_type_collection_feed,
    p_source         => 'SELECT username, password 
                         FROM CAPSTONE.USERS u
                         WHERE u.USERNAME = :username AND u.PASSWORD = :password', 
    p_items_per_page => 10
  );
  COMMIT;
END;
/
-- example: https://gb9d3cf06fca1a2-capstoneadw.adb.eu-madrid-1.oraclecloudapps.com/ords/capstone/users/testUser/testPass/

--in this endpoint i need to fetch the portfolio composition for a given user:
--REMEMBER THIS WILL GIVE AN EMPTY 'items' LIST IF THE USERNAME IS NOT FOUND
BEGIN
  ORDS.define_service(
    p_module_name    => 'user_stocks',
    p_base_path      => 'user_stocks/',
    p_pattern        => ':username/',
    p_method         => 'GET',
    p_source_type    => ORDS.source_type_collection_feed,
    p_source         => 'SELECT s.STOCK, s.QUANT 
                         FROM CAPSTONE.USERS u JOIN CAPSTONE.STOCKS s ON u.USER_ID = s.USER_ID 
                         WHERE u.USERNAME = :username',     --this query will get the stock composition in the format "AAPL,11","MSFT,22", and so on
    p_items_per_page => 10
  );
  COMMIT;
END;
/

--example: https://gb9d3cf06fca1a2-capstoneadw.adb.eu-madrid-1.oraclecloudapps.com/ords/capstone/user_stocks/testUser/


--in this endpoint i need to fetch the portfolio composition for a given user:
--REMEMBER THIS WILL GIVE AN EMPTY 'items' LIST IF THE USERNAME IS NOT FOUND
BEGIN
  ORDS.define_service(
    p_module_name    => 'user_stocks',
    p_base_path      => 'user_stocks/',
    p_pattern        => ':username/',
    p_method         => 'GET',
    p_source_type    => ORDS.source_type_collection_feed,
    p_source         => 'SELECT s.STOCK, s.QUANT 
                         FROM CAPSTONE.USERS u JOIN CAPSTONE.STOCKS s ON u.USER_ID = s.USER_ID 
                         WHERE u.USERNAME = :username',     --this query will get the stock composition in the format "AAPL,11","MSFT,22", and so on
    p_items_per_page => 10
  );
  COMMIT;
END;
/

--this endpoint will be for adding stocks
BEGIN
  ORDS.define_service(
    p_module_name    => 'ADD STOCKS',
    p_base_path      => 'add_stocks/',
    p_pattern        => ':username/:stock/:quant',
    p_method         => 'GET',
    p_source_type    => ORDS.source_type_collection_feed,
    p_source         => 'SELECT s.STOCK, s.QUANT 
                         FROM CAPSTONE.USERS u JOIN CAPSTONE.STOCKS s ON u.USER_ID = s.USER_ID 
                         WHERE u.USERNAME = :username',     --this query will get the stock composition in the format "AAPL,11","MSFT,22", and so on
    p_items_per_page => 10
  );
  COMMIT;
END;
/

--this procedure is for creating new stocks:
CREATE OR REPLACE PROCEDURE add_stocks (
    P_PROD_ID	stocks.prod_id%TYPE,
    P_CUST_ID	sales.cust_id%TYPE,
    P_TIME_ID	VARCHAR2,
    P_CHANNEL_ID	sales.CHANNEL_ID%TYPE,
    P_PROMO_ID	sales.PROMO_ID%TYPE,
    P_QUANTITY_SOLD	sales.QUANTITY_SOLD%TYPE,
    P_AMOUNT_SOLD  sales.AMOUNT_SOLD%TYPE
)
AS
BEGIN
    INSERT INTO sales (PROD_ID, CUST_ID, TIME_ID, CHANNEL_ID, PROMO_ID, QUANTITY_SOLD, AMOUNT_SOLD )
    VALUES (
        P_PROD_ID,
        P_CUST_ID,
        to_date(P_TIME_ID,'YYYY-MM-DD HH24:MI:SS'),
        P_CHANNEL_ID,
        P_PROMO_ID,
        P_QUANTITY_SOLD,
        P_AMOUNT_SOLD);
        --
        HTP.print('New row created for product ID= ' || p_prod_id);
        EXCEPTION
        WHEN OTHERS THEN
            HTP.print(SQLERRM);
END create_sales;
/


--Basic interactions with the database:
--Checking username and password:
SELECT username, password 
FROM CAPSTONE.USERS u
WHERE u.USERNAME = :username AND u.PASSWORD = :password

--adding
INSERT INTO STOCKS (USER_ID, SYMBOL, QUANTITY)
SELECT USER_ID, :symbol, :quant FROM USERS WHERE USERNAME=:username;

--deleting
DELETE FROM STOCKS
WHERE USER_ID IN (SELECT USER_ID FROM USERS WHERE USERNAME=:username)
AND SYMBOL=:symbol;

--modifying
UPDATE CAPSTONE.STOCKS
SET QUANTITY = :quant
WHERE USER_ID = (SELECT USER_ID FROM CAPSTONE.USERS WHERE USERNAME = :username)
AND SYMBOL = :symbol;